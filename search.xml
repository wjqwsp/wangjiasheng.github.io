<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[RESTful API规范补充以及JAX-RS传递参数的方法]]></title>
      <url>http://yoursite.com/2016/08/23/RESTful-API%E8%A7%84%E8%8C%83%E8%A1%A5%E5%85%85/</url>
      <content type="html"><![CDATA[<h3 id="搜索的过滤与排序"><a href="#搜索的过滤与排序" class="headerlink" title="搜索的过滤与排序"></a>搜索的过滤与排序</h3><p>　　搜索在RESTful API里是用GET方法实现的，URI一般是某个对象，可以是单个也可以是列表。以微博搜索为例，如果不加任何条件，其URI一般是这样的：</p>
<pre><code>/api/weibo</code></pre>
<pre><code>/api/weibo/6</code></pre>

<p>　　但往往还需要限制一下搜索条件，例如评论数大于某个数，或者含有什么关键字，如果是搜索微博列表，也可能加上对日期作升序或降序排序的要求。这些附加条件，是作为query param附加在http请求里的。例如：<br><a id="more"></a></p>
<ul>
<li>GET /weibo?deleted=true - 得到所有标记为删除的微博</li>
<li>GET /weibo?sort=-create-date - 按照创建日期反序排序得到微博列表</li>
<li>GET /weibo?sort=comment-count,-create-date - 先按微博评论数再按创建日期反序排序得到微博列表</li>
<li>GET /weibo?keyword=xxx - 得到包含关键字xxx的微博列表</li>
<li>GET /weibo?keyword=xxx&amp;deleted=true&amp;sort=comment-count,-create-date - 搜索关键字包含xxx的标记为删除的微博，按照评论数再按创建日期反序排序得到微博列表</li>
</ul>
<p>　　确定了搜索对象，例如weibo，那么在服务器端我们就知道需要查找哪个表，或者需要连接哪几个表。where后面的条件则根据附上的参数动态选择。order by后面的属性则根据sort后面的参数添加，带-号的代表降序，很容易翻译成sql语言。</p>
<p>　　我们还可以选择返回哪些属性，或者不返回哪些属性。例如：</p>
<ul>
<li>GET /weibo?fields=id,subject - 得到微博列表，每个微博里的字段只有id和subject两个，其他的都排除了。</li>
<li>GET /weibo?fields-exclude=id,subject - 得到微博列表，每个微博里的id和subject被排除了，输出其他的字段。</li>
</ul>
<p>　　这些参数就是select后面的列信息。</p>
<p>　　由于RESTful API的资源是面向对象的，我们往往是对某一个对象作查找，如果在查找里需要附带其他资源对象的信息，也可以在query param里添加，用embed字段作为key。例如：</p>
<ul>
<li>GET /weibo?embed=owner.id,owner.name - 得到微博列表，每个微博里的信息里加入这个微博的所有者的id和name两个属性。</li>
</ul>
<p>　　这些属性也是跟在select后面的，只要参数名与数据库的表名能一一对应即可。由于存在嵌入的对象属性，在数据库查找上往往便需要多表连接。</p>
<p>　　上一讲说的翻页的页数和每页的数据项数也是作为query param传给服务器的。</p>
<h3 id="常用的查询"><a href="#常用的查询" class="headerlink" title="常用的查询"></a>常用的查询</h3><p>　　上面说的对搜索的过滤和排序是通用的，根据传入的参数而动态构造sql语句。而对于某些特别常用的查询，例如新浪微博里的最热微博top10，则可以用专用的名字代替，例如：</p>
<ul>
<li>GET /weibo/top10</li>
</ul>
<h3 id="不太能归类的操作"><a href="#不太能归类的操作" class="headerlink" title="不太能归类的操作"></a>不太能归类的操作</h3><p>　　http是面向资源的，RESTful API是基于http的，其操作也是针对某个资源对象进行的，操作的类型则用http方法表达，例如PUT,POST,PATCH,DELETE,GET。然而，有些操作不是那么容易归类为上述的http方法，例如给微博点赞。我们可以把点赞操作理解成修改微博对象，按照这个定义是应该用PUT或PATCH方法。但是一般意义上我们说的对微博的修改是指编辑微博的文本内容。因此，有必要把点赞这个操作独立出来，会更加方便，意义也更加清晰。例如：</p>
<ul>
<li>PUT /weibo/12/like - 给某个微博点赞</li>
<li>DELETE /weibo/12/like - 删除某个微博的赞</li>
</ul>
<h3 id="常用的status-code"><a href="#常用的status-code" class="headerlink" title="常用的status code"></a>常用的status code</h3><ul>
<li>200 OK - 正常返回，用于GET, PUT, PATCH的这些正常操作。</li>
<li>201 Created - 用于POST创建对象正常返回。</li>
<li>204 No Content - 用于DELETE，成功操作但没啥返回的。</li>
<li>304 Not Modified - 有Cache，表示没改过。</li>
<li>400 Bad Request - 指请求里面有些参数不对。</li>
<li>401 Unauthorized - 没有登录</li>
<li>403 Forbidden - 登录了但是没有授权访问某个资源</li>
<li>404 Not Found - 资源不存在</li>
<li>405 Method Not Allowed - 登录了但是不允许做某个操作</li>
<li>410 Gone - 表示资源不再提供了，用来做老版本提示用的</li>
<li>415 Unsupported Media Type - 請求的Centent Type不對</li>
<li>422 Unprocessable Entity - 一般用于validation校验</li>
<li>429 Too Many Requests - 请求太快太多，达到限制</li>
</ul>
<p>　　http提供了很多的status code。但在RESTful API里常用的就这几个。我们可以根据业务需求对不同的request返回相匹配的状态码。方法就是上一讲提到的构造Response对象返回以及异常处理。</p>
<h3 id="JAX-RS怎样接收客户端的参数"><a href="#JAX-RS怎样接收客户端的参数" class="headerlink" title="JAX-RS怎样接收客户端的参数"></a>JAX-RS怎样接收客户端的参数</h3><p>　　RESTful API的核心是URI，HTTP方法以及数据传输格式，在第一讲详细讲过。http header也十分重要，在第二讲讲过。除此之外，服务器与客户端的交互往往需要传递一些参数，例如对象id，需要更新的整个对象以及上面提到的query param等。这些参数的传递都是通过注解实现的。下面介绍一下常用的参数注解。</p>
<h5 id="PathParam"><a href="#PathParam" class="headerlink" title="PathParam"></a>PathParam</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PATCH</span></div><div class="line"><span class="meta">@Path</span>(<span class="string">"&#123;id&#125;/remove"</span>)</div><div class="line"><span class="meta">@Consumes</span>(&#123;<span class="string">"application/json"</span>&#125;)</div><div class="line"><span class="meta">@Produces</span>(&#123;<span class="string">"application/json"</span>&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span> Long id,@Context HttpServletRequest request) </span>&#123;</div></pre></td></tr></table></figure>
<p>　　需要删除某条微博，此时URI里必定含有该微博的id信息，可以用@PathParam注解从URI里提取参数。</p>
<h5 id="QueryParam"><a href="#QueryParam" class="headerlink" title="QueryParam"></a>QueryParam</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span></div><div class="line"><span class="meta">@Path</span>(<span class="string">"danger-unsolved"</span>)</div><div class="line"><span class="meta">@Consumes</span>(&#123;<span class="string">"application/json"</span>&#125;)</div><div class="line"><span class="meta">@Produces</span>(&#123;<span class="string">"application/json;charset=UTF-8"</span>&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">findUnSolved</span><span class="params">(@QueryParam(<span class="string">"page"</span>)</span> <span class="keyword">int</span> page,@<span class="title">QueryParam</span><span class="params">(<span class="string">"per-page"</span>)</span> <span class="keyword">int</span> perPage,@Context HttpServletResponse response) </span>&#123;</div></pre></td></tr></table></figure>
<p>　　翻页信息用query param传递，用@QueryParam注解可以提取。</p>
<h5 id="FormParam"><a href="#FormParam" class="headerlink" title="FormParam"></a>FormParam</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@POST</span></div><div class="line"><span class="meta">@Path</span>(<span class="string">"login"</span>)</div><div class="line"><span class="meta">@PermitAll</span></div><div class="line"><span class="meta">@Consumes</span>(&#123;<span class="string">"application/x-www-form-urlencoded"</span>&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">login</span><span class="params">(@Context HttpServletRequest request,</span></span></div><div class="line">        @Context HttpServletResponse response,</div><div class="line">        @FormParam(<span class="string">"username"</span>) String username,</div><div class="line">        @<span class="title">FormParam</span><span class="params">(<span class="string">"password"</span>)</span> String password,</div><div class="line">        @<span class="title">FormParam</span><span class="params">(<span class="string">"remember_me"</span>)</span> String rememberMe) &#123;</div></pre></td></tr></table></figure>
<p>　　用POST请求提交的表格，其表单内容可以用@FormParam获取。</p>
<h5 id="MatrixParam"><a href="#MatrixParam" class="headerlink" title="MatrixParam"></a>MatrixParam</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Path</span>(<span class="string">"/books"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@GET</span></div><div class="line">	<span class="meta">@Path</span>(<span class="string">"&#123;year&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Response <span class="title">getBooks</span><span class="params">(@PathParam(<span class="string">"year"</span>)</span> String year,</span></div><div class="line">			@<span class="title">MatrixParam</span><span class="params">(<span class="string">"author"</span>)</span> String author,</div><div class="line">			@<span class="title">MatrixParam</span><span class="params">(<span class="string">"country"</span>)</span> String country) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> Response</div><div class="line">			.status(<span class="number">200</span>)</div><div class="line">			.entity(<span class="string">"getBooks is called, year : "</span> + year</div><div class="line">				+ <span class="string">", author : "</span> + author + <span class="string">", country : "</span> + country)</div><div class="line">			.build();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　上述的request请求URI是/books/2011;author=mkyong;country=malaysia。@MatirxParam可以提取用；分隔的一组key/value对。</p>
<h5 id="HeaderParam和CookieParam"><a href="#HeaderParam和CookieParam" class="headerlink" title="HeaderParam和CookieParam"></a>HeaderParam和CookieParam</h5><p>　　@HeaderParam和@CookieParam注解都是提取header或者cookie里某个key的value。像@HeaderParam(“Referer”)和@CookieParam(“customerId”)等，非常简单。</p>
<h5 id="获取HttpServletRequest和HttpServletResponse"><a href="#获取HttpServletRequest和HttpServletResponse" class="headerlink" title="获取HttpServletRequest和HttpServletResponse"></a>获取HttpServletRequest和HttpServletResponse</h5><p>　　JAX-RS是基于servlet实现的。其每个资源方法都可以提取相应请求的HttpServletRequest和HttpServletResponse对象。利用这两个对象，我们可以在资源方法内构造Response对象，也可以修改header和cookie。这两个对象都可以用@Context注解获取。上面的一些例子也有体现。</p>
<h5 id="payload对象"><a href="#payload对象" class="headerlink" title="payload对象"></a>payload对象</h5><p>　　http request的payload对象在网络中是以json或xml的格式传输的，只要JAX-RS里能保证其反序列化，那么在参数列表里直接用相应的POJO对象类名和实体名表示即可。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PATCH</span></div><div class="line"><span class="meta">@Path</span>(<span class="string">"&#123;id&#125;/block"</span>)</div><div class="line"><span class="meta">@Consumes</span>(&#123;<span class="string">"application/json"</span>&#125;)</div><div class="line"><span class="meta">@Produces</span>(&#123;<span class="string">"application/json"</span>&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> MessageDTO <span class="title">block</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span> Long id,@Context HttpServletRequest request,MessageDTO messageDTO) </span>&#123;</div></pre></td></tr></table></figure>
<p>　　上面的MessageDTO对象便是http request的payload对象。</p>
<p>　　</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RESTful API 入门二(JAX-RS实现)]]></title>
      <url>http://yoursite.com/2016/08/22/RESTful-API-%E5%85%A5%E9%97%A8%E4%BA%8C-JAX-RS%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h3 id="为什么要用Provider"><a href="#为什么要用Provider" class="headerlink" title="为什么要用Provider"></a>为什么要用Provider</h3><p>　　provider是在程序运行时自动调用的一些类，起到配置与修改http请求与回应的作用，是JAX-RS里不可或缺的一项组件。从上一讲可以看到，Resource组件已经能够完全实现RESTful API，在JAX-RS标准里无非就是添加一些注解的事。然而，实现功能只是最基本的要求，要做出企业级的应用，必须符合一些标准和规范，才能最大程度地提高团队的开发效率，并从最佳实践的角度去吻合市场的需求。RESTful API的一些设计规范，就必须要使用到provider去做配置。</p>
<h3 id="几种provider的介绍"><a href="#几种provider的介绍" class="headerlink" title="几种provider的介绍"></a>几种provider的介绍</h3><p>　　所有类名上添加了@provider注解的类，都属于provider组件。下面对这些组件类一一介绍一下。<br><a id="more"></a></p>
<h5 id="ContainerRequestFilter-ContainerResponseFilter"><a href="#ContainerRequestFilter-ContainerResponseFilter" class="headerlink" title="ContainerRequestFilter,ContainerResponseFilter"></a>ContainerRequestFilter,ContainerResponseFilter</h5><p>　　过滤器，顾名思义，是对进入服务器与从服务器输出的数据进行过滤。由于RESTful API实际上是操作http协议，那么过滤器便是对http request或http response的header或body进行过滤，作出一些修改，或判断是否拒绝该http request或http response。</p>
<p>　　containerRequestFilter的核心是filter方法，接收ContainerRequestContext对象，这个对象封装了http request。一般在这个方法里对header进行操作。ContainerResponseFilter的核心也是filter方法，接收ContainerResponseContext和ContainerResponseContext对象，这个对象封装的则是http response，也主要针对其heaer操作。</p>
<p>　　下面从两个主要的设计规范点出发，看看怎么用JAX-RS的过滤器来实现。</p>
<ul>
<li>HTTP方法重载。上一讲提到，RESTful API涉及的HTTP方法有GET，POST,PUT,PATCH,DELETE这几种，而有些http proxy只能用GET和POST方法。一般的解决方法是将PUT，PATCH和DELETE请求也用POST方法发出，但在header里添加X-HTTP-Method-Override这个key，来存储真正的方法名。那么服务器端怎么利用http header，来进行方法重新匹配的呢？这就需要用到ContainerRequestFilter了。下面请看代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Provider</span></div><div class="line"><span class="meta">@PreMatching</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpMethodOverrideEnabler</span> <span class="keyword">implements</span> <span class="title">ContainerRequestFilter</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">(ContainerRequestContext requestContext)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        String override = requestContext.getHeaders()</div><div class="line">                .getFirst(<span class="string">"X-HTTP-Method-Override"</span>);</div><div class="line">        <span class="keyword">if</span> (override != <span class="keyword">null</span>) &#123;</div><div class="line">            requestContext.setMethod(override);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　　先来看@PreMatching注解。所有的provider都对应特定的资源类或者资源方法，当http request到达，会首先根据其URI和HTTP方法类型去匹配相应的Resource组件类的某个方法，这在上一讲已经讲过。一般情况下所有ContainerRequestFilter的执行时机是在方法匹配之后，但是我们的需求是在方法匹配之前对方法进行重载，根据X-HTTP-Method-Override里的方法名进行重匹配。这就需要用到@PreMatching注解了，它能把过滤器的执行时机提前到方法匹配之前。filter方法里代码也很简单，就是从requestContext里提取header里的X-HTTP-Method-Override字段，如果不为空则用setMethod方法进行重匹配。</p>
<ul>
<li>对访问频率进行限制。我们提供的RESTful API服务允许开发者访问，但必须设置一定的安全措施，防止被滥用，被过度调用，被恶意攻击，因此必须对资源的访问频率进行限制。在限制的同时，我们也应该提供给调用者一些信息，让他们获知每周期的调用限制数，每周期内的剩余次数，以及到下一个周期的剩余时间。这些的实现同样可以用过滤器以及header来实现。请看代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Provider</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpLimitRequestFilter</span> <span class="keyword">implements</span> <span class="title">ContainerRequestFilter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">(ContainerRequestContext requestContext)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (requestContext.getCookies().get(<span class="string">"reset"</span>) != <span class="keyword">null</span> &amp;&amp; requestContext.getCookies().get(<span class="string">"timeout"</span>) != <span class="keyword">null</span>) &#123;</div><div class="line">            String timeOut = requestContext.getCookies().get(<span class="string">"timeout"</span>).getValue();</div><div class="line">            String reset = requestContext.getCookies().get(<span class="string">"reset"</span>).getValue();</div><div class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Date timeOutDate = sdf.parse(timeOut);</div><div class="line">                <span class="keyword">if</span> (timeOutDate.after(<span class="keyword">new</span> Date()) &amp;&amp; Integer.parseInt(reset) &lt;= <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> WebApplicationException(Response.status(<span class="number">429</span>).build());</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Provider</span></div><div class="line"><span class="meta">@Tracked</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpLimitResponseFilter</span> <span class="keyword">implements</span> <span class="title">ContainerResponseFilter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LIMIT = <span class="number">100</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> TERM = <span class="number">60</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">(ContainerRequestContext requestContext, ContainerResponseContext responseContext)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (requestContext.getCookies().get(<span class="string">"reset"</span>) == <span class="keyword">null</span> || requestContext.getCookies().get(<span class="string">"timeout"</span>) == <span class="keyword">null</span>) &#123;</div><div class="line">            addOrReplaceCookies(responseContext);</div><div class="line">        &#125; </div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            String timeOut = requestContext.getCookies().get(<span class="string">"timeout"</span>).getValue();</div><div class="line">            String reset = requestContext.getCookies().get(<span class="string">"reset"</span>).getValue();</div><div class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Date timeOutDate = sdf.parse(timeOut);</div><div class="line">                Date now  = <span class="keyword">new</span> Date();</div><div class="line">                <span class="keyword">if</span> (timeOutDate.before(now)) &#123;</div><div class="line">                    addOrReplaceCookies(responseContext);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">long</span> interval = (timeOutDate.getTime() - now.getTime())/<span class="number">1000</span>;</div><div class="line">                    <span class="keyword">if</span>(Integer.parseInt(reset) &gt; <span class="number">0</span>)&#123;</div><div class="line">                        NewCookie cookie = <span class="keyword">new</span> NewCookie(<span class="string">"reset"</span>, String.valueOf(Integer.parseInt(reset) - <span class="number">1</span>), <span class="string">"/sampleweb"</span>, <span class="string">""</span>, <span class="string">"comment"</span>, <span class="number">100</span>, <span class="keyword">false</span>);</div><div class="line">                        responseContext.getHeaders().add(<span class="string">"Set-Cookie"</span>, cookie);</div><div class="line">                        responseContext.getHeaders().add(<span class="string">"X-Rate-Limit-Remaining"</span>, Integer.parseInt(reset) - <span class="number">1</span>);</div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        NewCookie cookie = <span class="keyword">new</span> NewCookie(<span class="string">"reset"</span>, String.valueOf(<span class="number">0</span>), <span class="string">"/sampleweb"</span>, <span class="string">""</span>, <span class="string">"comment"</span>, <span class="number">100</span>, <span class="keyword">false</span>);</div><div class="line">                        responseContext.getHeaders().add(<span class="string">"Set-Cookie"</span>, cookie);</div><div class="line">                        responseContext.getHeaders().add(<span class="string">"X-Rate-Limit-Remaining"</span>, <span class="number">0</span>);</div><div class="line">                    &#125;                    </div><div class="line">                    responseContext.getHeaders().add(<span class="string">"X-Rate-Limit-Limit"</span>, LIMIT);</div><div class="line">                    responseContext.getHeaders().add(<span class="string">"X-Rate-Limit-Reset"</span>, (<span class="keyword">int</span>)interval);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addOrReplaceCookies</span><span class="params">(ContainerResponseContext responseContext)</span> </span>&#123;</div><div class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line">        Calendar cal = Calendar.getInstance();</div><div class="line">        cal.add(Calendar.MINUTE, <span class="number">1</span>);        </div><div class="line">        NewCookie reset = <span class="keyword">new</span> NewCookie(<span class="string">"reset"</span>, String.valueOf(LIMIT - <span class="number">1</span>), <span class="string">"/sampleweb"</span>, <span class="string">""</span>, <span class="string">"comment"</span>, <span class="number">100</span>, <span class="keyword">false</span>);</div><div class="line">        NewCookie remain = <span class="keyword">new</span> NewCookie(<span class="string">"timeout"</span>, sdf.format(cal.getTime()), <span class="string">"/sampleweb"</span>, <span class="string">""</span>, <span class="string">"comment"</span>, <span class="number">100</span>, <span class="keyword">false</span>);</div><div class="line">        responseContext.getHeaders().add(<span class="string">"Set-Cookie"</span>, remain);</div><div class="line">        responseContext.getHeaders().add(<span class="string">"Set-Cookie"</span>, reset);</div><div class="line">        responseContext.getHeaders().add(<span class="string">"X-Rate-Limit-Limit"</span>, LIMIT);</div><div class="line">        responseContext.getHeaders().add(<span class="string">"X-Rate-Limit-Remaining"</span>, LIMIT - <span class="number">1</span>);</div><div class="line">        responseContext.getHeaders().add(<span class="string">"X-Rate-Limit-Reset"</span>, TERM);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　由于http协议是无状态的，而用户的访问频率是需要保存的状态，因此需用cookie来实现。cookie主要存储两个值，一个是本周期内还可以访问的次数，一个是本周期结束的时间。利用这两个值，在ContainerRequestFilter内判断是否接受这次请求，并在ContainerResponseFilter内更新每次请求过后cookie的值。这里有一个坑需要特别注意，ContainerResponseContext用getCookies()方法获取的cookie是只读的，不能修改，如果要更新cookie必须直接在http response的header里写入Set-Cookie字段。这也是http response携带cookie的规范做法。并且，NewCookie对象在创建时候必须指定路径。因为相同路径和域名的cookie是保存在同一个文件夹里的，一般是取工程路径，以表示相同工程内使用的cookie，不然在添加cookie的时候即便key一样也会插入新数据，而不会覆盖原来的cookie，达不到更新的效果。</p>
<p>　　反馈给用户的信息是保存在response的header里的，X-Rate-Limit-Limit表示每个累计周期内的访问次数最大是多少；X-Rate-Limit-Remaining表示目前的累计周期内还剩余多少次可以用；X-Rate-Limit-Reset表示还有多少秒钟累计周期就到期了，可以开始下一个周期了。这些header信息都是RESTful API的设计规范里包含的。</p>
<p>　　如果用户访问频率超出限制，需要抛出error code为429的http response，429在http标准里是表示Too Many Requests。这也是RESTful API的规范之一。充分利用错误码来表达操作的结果，设计RESTful API的时候对每一条http response都必须返回相应的错误码，不得有误。更详细的error code规范会在后面介绍，这里先提一下。</p>
<h5 id="MessageBodyWriter和MessageBodyReader"><a href="#MessageBodyWriter和MessageBodyReader" class="headerlink" title="MessageBodyWriter和MessageBodyReader"></a>MessageBodyWriter和MessageBodyReader</h5><p>　　这两类是进行对象的序列化与反序列化的。在基本的RESTful API开发中并不常用，因为如上一讲所说，利用@XmlRootElement这个JAXB注解便可轻松解决xml与json的序列化与反序列化，只有更高层次的要求才需要自己实现这两个类。我也并没有怎么使用过，对这两个类的认识也仅停留在官方文档的介绍，日后如果有机会实践过后，有更深入的理解再行补充。</p>
<h5 id="ContextResolver"><a href="#ContextResolver" class="headerlink" title="ContextResolver"></a>ContextResolver</h5><p>　　前面说过，RESTful API规范里数据传输的格式是json，而JAX-RS序列化后的json格式往往是没有缩进和换行的，这就使得json文本不方便阅读。RESTful API规范要求json必须按照pretty print的方式输出。实现pretty print一种比较简单的方法是使用Jackson框架，利用ObjectMapper类将对象映射成相应的json文本，并且其pretty print模式。下面请看代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Provider</span></div><div class="line"><span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonContextResolver</span> <span class="keyword">implements</span> <span class="title">ContextResolver</span>&lt;<span class="title">ObjectMapper</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JacksonContextResolver</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">this</span>.objectMapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line">        <span class="keyword">this</span>.objectMapper</div><div class="line">                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>)</div><div class="line">                .configure(SerializationFeature.INDENT_OUTPUT, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ObjectMapper <span class="title">getContext</span><span class="params">(Class&lt;?&gt; objectType)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> objectMapper;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　其中objectMapper.configure(SerializationFeature.INDENT_OUTPUT, true)便是让输出使用pretty print。注意的是，使用Jackson框架必须要在Application的实现类里注册相应资源。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getClasses() &#123;</div><div class="line">        Set&lt;Class&lt;?&gt;&gt; resources = <span class="keyword">new</span> java.util.HashSet&lt;&gt;();</div><div class="line">        addRestResourceClasses(resources); </div><div class="line">        resources.add(JacksonFeature.class);    </div><div class="line">        <span class="keyword">return</span> resources;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>　　resources.add(JacksonFeature.class)这一句是不能省的。</p>
<h5 id="WriteInterceptor-ReadInterceptor"><a href="#WriteInterceptor-ReadInterceptor" class="headerlink" title="WriteInterceptor,ReadInterceptor"></a>WriteInterceptor,ReadInterceptor</h5><p>　　拦截器，与过滤器的作用有很多相似的地方。不同之处在于，过滤器一般用来处理header，拦截器则用来处理http request与response的body里的entity的输入输出流。可以利用拦截器对输入流进行统一的解码或解压缩，或者对输出流进行统一的编码或压缩。</p>
<p>　　RESTful API规范里要求对response同一使用GZIP压缩，把pretty print处理后的json文本压缩处理，节省带宽，节约流量。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Provider</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GZIPWriterInterceptor</span> <span class="keyword">implements</span> <span class="title">WriterInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundWriteTo</span><span class="params">(WriterInterceptorContext context)</span></span></div><div class="line">                    <span class="keyword">throws</span> IOException, WebApplicationException &#123;</div><div class="line"></div><div class="line">    	MultivaluedMap&lt;String,Object&gt; headers = context.getHeaders();</div><div class="line">    	headers.add(<span class="string">"Content-Encoding"</span>, <span class="string">"gzip"</span>);</div><div class="line">        <span class="keyword">final</span> OutputStream outputStream = context.getOutputStream();</div><div class="line">        context.setOutputStream(<span class="keyword">new</span> GZIPOutputStream(outputStream));</div><div class="line">        context.proceed();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　上面的代码是利用WriteInterceptor进行GZIP压缩的示例，十分简单，ReadInterceptor类似，只是换成操作输入流。只需要在输出流外再包装一层GZIPOutputStream的包装流便可。注意必须在header里添加Content-Encoding字段，这样浏览器才知道怎么解压缩。</p>
<p>　　上面最值得一提的是context.proceed()这个方法。所有拦截器必须调用这个方法，调用这个方法后会自动调用下一个拦截器，直到到达拦截器链末端的最后一个拦截器，此时该拦截器调用proceed()方法后会调用MessageBodyWriter或MessageBodyReader去进行序列化或反序列化。</p>
<p>　　拦截器以及MessageBodyWriter和MessageBodyReader都是在entity不为空的情况下才会调用的，若response不返回数据或者request的body不携带数据，则这些类都不会被使用。</p>
<h5 id="provider的调用顺序"><a href="#provider的调用顺序" class="headerlink" title="provider的调用顺序"></a>provider的调用顺序</h5><ol>
<li>pre-matching ContainerRequestFilters</li>
<li>post-matching ContainerRequestFilters</li>
<li>ReaderInterceptor</li>
<li>MessageBodyReader</li>
<li>ContainerResponseFilters</li>
<li>WriterInterceptor</li>
<li>MessageBodyWriter</li>
</ol>
<h5 id="资源绑定"><a href="#资源绑定" class="headerlink" title="资源绑定"></a>资源绑定</h5><p>　默认情况下所有的http请求的到来都会让所有provider类自动运行相应的方法，但我们可以通过资源绑定的方式，让某些provider只会被某些request触发。主要有两种方式：Name binding和Dynamic binding</p>
<ol>
<li>Name binding</li>
</ol>
<p>通过@NameBinding注解实现：</p>
<ul>
<li>定义注解，例如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@NameBinding</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Tracked &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>为provider添加该注解：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Provider</span></div><div class="line"><span class="meta">@Tracked</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpLimitResponseFilter</span> <span class="keyword">implements</span> <span class="title">ContainerResponseFilter</span> </span>&#123;</div></pre></td></tr></table></figure>
<ul>
<li>为相应的资源方法或资源类添加该注解：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span></div><div class="line"><span class="meta">@Path</span>(<span class="string">"current_user"</span>)</div><div class="line"><span class="meta">@PermitAll</span></div><div class="line"><span class="meta">@Produces</span>(&#123;<span class="string">"application/json"</span>&#125;)</div><div class="line"><span class="meta">@Tracked</span></div><div class="line"><span class="function"><span class="keyword">public</span> JsonObject <span class="title">getCurrentUserInfo</span><span class="params">(@Context HttpServletRequest request)</span> </span>&#123;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Stateless</span></div><div class="line"><span class="meta">@RolesAllowed</span>(&#123;<span class="string">"operator"</span>&#125;)</div><div class="line"><span class="meta">@Path</span>(<span class="string">"message"</span>)</div><div class="line"><span class="meta">@Tracked</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageFacadeREST</span> <span class="keyword">extends</span> <span class="title">AbstractFacade</span>&lt;<span class="title">Message</span>&gt; </span>&#123;</div></pre></td></tr></table></figure>
<p>　　当访问带有@Tracked注解的方法或类时，带有@Tracked的provider便会在相应的资源方法调用前后自动触发。从而实现资源绑定。</p>
<ol>
<li>Dynamic binding</li>
</ol>
<p>　　动态绑定是通过DynamicFeature接口实现的，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompressionDynamicBinding</span> <span class="keyword">implements</span> <span class="title">DynamicFeature</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ResourceInfo resourceInfo, FeatureContext context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (HelloWorldResource.class.equals(resourceInfo.getResourceClass())</div><div class="line">                &amp;&amp; resourceInfo.getResourceMethod()</div><div class="line">                    .getName().contains(<span class="string">"VeryLongString"</span>)) &#123;</div><div class="line">            context.register(GZIPWriterInterceptor.class);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　configure()方法里接收两个参数，ResourceInfo对象用来对request要访问的资源进行过滤，FeatureContext对象用来对相应的provider进行动态注册。</p>
<h3 id="异常处理以及返回Response对象"><a href="#异常处理以及返回Response对象" class="headerlink" title="异常处理以及返回Response对象"></a>异常处理以及返回Response对象</h3><p>　　如果没有错误正常返回，一般直接返回结果对象或者什么也不返回即可，这时不需要额外配置response的header或status code。但是，若抛出异常或者结果不正确，则需要返回相应的status code。这时候便需要我们构造Response对象返回。</p>
<p>　　JAX-RS的异常处理建议统一使用WebApplicationException类或者使用ExceptionMapper类来实现。</p>
<h5 id="WebApplicationException"><a href="#WebApplicationException" class="headerlink" title="WebApplicationException"></a>WebApplicationException</h5><p>　　直接抛出WebApplicationException:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> WebApplicationException(Response.status(<span class="number">429</span>).build());</div></pre></td></tr></table></figure>
<p>　　接收的参数可以是用相应status code构造的Response对象，也可以直接用status code作为参数。此时JAX-RS便会构造出相应status code的http response报文。</p>
<h5 id="ExceptionMapper"><a href="#ExceptionMapper" class="headerlink" title="ExceptionMapper"></a>ExceptionMapper</h5><p>　　如果在程序运行期间抛出异常，导致不能返回正确结果，可以用ExceptionMapper的实现类来捕捉特定的异常。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Provider</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessLocalExceptionMapper</span> <span class="keyword">implements</span> <span class="title">ExceptionMapper</span>&lt;<span class="title">AccessLocalException</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">toResponse</span><span class="params">(AccessLocalException exception)</span> </span>&#123;        </div><div class="line">        <span class="keyword">return</span> Response.status(Response.Status.UNAUTHORIZED).build();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　ExceptionMapper可以定义成任何异常类的处理类，在toResponse()方法里进行异常处理，并构造Response对象返回。有这么一个机制来统一进行异常处理，使得代码管理十分清晰，行文十分优雅。</p>
<h5 id="正常返回Response对象"><a href="#正常返回Response对象" class="headerlink" title="正常返回Response对象"></a>正常返回Response对象</h5><p>　　即便是在资源方法里正常返回，但如果除了传输数据外，还需要携带header,cookie等信息，则也需要构造Response对象返回，正常数据则作为Response对象里的GenericEntity对象保存。</p>
<p>　　在正常的业务逻辑里，我们读取一些数据的时候往往需要翻页信息，页数以及每页的数据项数在RESTful API规范里往往是作为http request的query params传输的，而相应的http response也通常会在header里返回上一页，下一页，第一页以及最后一页数据的URI，方便用户继续访问。下面就以这一个规范点作为需求，看看代码里怎么构造翻页信息的Response对象的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GenericEntity entity = <span class="keyword">new</span> GenericEntity&lt;List&lt;MessageDTO&gt;&gt;(messageRepo)&#123;&#125;;</div><div class="line"><span class="keyword">double</span> count = (<span class="keyword">double</span>)messageService.countDangerousMessage();</div><div class="line">response.setHeader(<span class="string">"next"</span>, <span class="string">"https://localhost:8080/sampleweb/api/message/danger-unsolved?page="</span> + (page + <span class="number">1</span>));</div><div class="line">response.setHeader(<span class="string">"prev"</span>, <span class="string">"https://localhost:8080/sampleweb/api/message/danger-unsolved?page="</span> + (page - <span class="number">1</span>));</div><div class="line">response.setHeader(<span class="string">"first"</span>, <span class="string">"https://localhost:8080/sampleweb/api/message/danger-unsolved?page=1"</span>); </div><div class="line">response.setHeader(<span class="string">"last"</span>, <span class="string">"https://localhost:8080/sampleweb/api/message/danger-unsolved?page="</span> + (<span class="keyword">int</span>)Math.ceil(count / perPage));</div><div class="line">response.setHeader(<span class="string">"X-Total-Count"</span>,String.valueOf((<span class="keyword">int</span>)count));</div><div class="line"><span class="keyword">return</span> Response.ok(entity).build();</div></pre></td></tr></table></figure>
<p>　　GenericEntity保存需要返回的body里的数据。在header里添加上相应页面资源的URI，并且让X-Total-Count返回总的数据项数。这些信息都是提供给用户的。Response的ok()方法接收entity参数，并且构造status code为200的http response返回给用户。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　这一讲主要讲的是JAX-RS的provider组件，并涉及了一些异常处理和构造Response对象的内容，其实主要就是围绕http request和http response展开的。希望读者能够体会到，RESTful API归根结底就是http报文，http报文又可以分为header和body。对header和body，RESTful API都有一定的规范对其进行限制，而实现这些规范的手段便是provider，异常处理以及Response对象。RESTful API必须对每一个接口的request和response的header和body有清楚的定义。手段方法是其次，RESTful API的思想与规范才是根本。下一讲会把一些还没涉及的设计规范讲一下，但用到的技术基本就是这一讲和上一讲Resource和Provider组件的内容了。       </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RESTful API 入门一(JAX-RS实现)]]></title>
      <url>http://yoursite.com/2016/08/21/RESTful-API-%E5%85%A5%E9%97%A8-JAX-RS%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　关于RESTful API的概念网上已经说过很多，可以用很多语言与框架实现，其规范也十分详尽。我这篇入门教程尽量用自己的理解去总结RESTful API的一些要点，并以JaveEE规范的JAX-RS框架为例，以实战的形式去讲述怎么搭建一套RESTful API，并在实践过程中体现RESTful API的设计规范。</p>
<h3 id="什么是RESTful-API"><a href="#什么是RESTful-API" class="headerlink" title="什么是RESTful API"></a>什么是RESTful API</h3><ol>
<li>服务器端提供给开发者的一套接口，开发者通过调用这些接口，访问服务器的资源。这些资源通常是数据库的表抽象出来的对象，程序员通过获取这些对象，把对这些对象的增删改查映射到数据库，从而实现自己前后端的其他业务逻辑。目前移动端很多都是使用RESTful API来访问后台，受移动端影响，浏览器端也越来越多地使用这种规范。</li>
<li>本质就是http协议。RESTful API的所有操作无非是CRUD，全部映射成http的POST,GET,PUT,PATCH,DELETE等方法，操作RESTful API实际上就是操作http报文，其只是在http协议外面再封装一层。因此操作十分简洁，直观，代码优雅。</li>
<li>用URI定位所有资源。服务器端把所有供开发者访问的资源都以特定的URI表示。URI与http方法(上述的POST，GET等)组合，便可以实现对所有资源的所有操作。以微博和评论为例，假如新浪微博开放了所有微博和评论允许开发者访问。那么所有微博的URI可能是：<a id="more"></a>
<pre><code>api/weibo</code></pre><br>　　id为30691的微博URI可能是：<br><pre><code>api/weibo/30691</code></pre><br>　　id为30691的微博所有评论的URI可能是：<br><pre><code>api/weibo/30691/comment</code></pre><br>　　id为30691的微博对应的评论id为2589的评论的URI可能是：<br><pre><code>api/weibo/30691/comment/2589</code></pre><br>　　出于面向对象的思想，一般每个资源都对应一个对象，应该用名词表示，且倾向于单数。资源之间的依赖关系可以参照上述的weibo与comment。由于评论必定对应于某一条微博，所以可以用类似weibo/30691/comment的形式表示这种依赖。</li>
</ol>
<p>　　显而易见，这种目录式的URI定位十分直观，简单。</p>
<h3 id="搭建基本JAX-RS环境"><a href="#搭建基本JAX-RS环境" class="headerlink" title="搭建基本JAX-RS环境"></a>搭建基本JAX-RS环境</h3><p>　　JAX-RS是JaveEE框架里专门用来实现RESTful API的技术。搭建十分简单，且大都用注解注入的形式实现，使代码结构十分清晰，代码量很少。除了依赖的包以及一些xml配置文件以外，代码里只需要自己继承实现javax.ws.rs.core.Application类便可以完成最基本的配置。依赖的包和xml配置可自行上网搜索，不是我这篇教程的重点，这里将主要介绍代码里如何实现RESTful API</p>
<h5 id="Application类"><a href="#Application类" class="headerlink" title="Application类"></a>Application类</h5><p>　　必须创建一个类继承Application类。JAX-RS里我们用到的组件主要有两类，分别是Resource和Provider。Resource就是上述的URI对应的可供用户访问的资源。Provider是运行时自行调用的一些类，起到配置作用，这在下一讲再详细介绍。这两类组件都必须在Application类的实现类的Set<class<?>&gt; getClasses()方法里进行注册。以下是官网文档的示例：</class<?></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getClasses() &#123;</div><div class="line">        Set&lt;Class&lt;?&gt;&gt; s = <span class="keyword">new</span> HashSet&lt;Class&lt;?&gt;&gt;();</div><div class="line">        s.add(HelloWorldResource.class);</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　HelloWorldResource就是Resource组件的其中一个类，如果RESTful API需要访问这个资源类，则需要用上述的语法实现注册，是不是很简单。</p>
<h5 id="ResourceConfig类"><a href="#ResourceConfig类" class="headerlink" title="ResourceConfig类"></a>ResourceConfig类</h5><p>　　ResourceConfig是JAX-RS里提供的一个Application的实现类，通过继承这个类并且在其派生类的构造方法里对组件进行注册，可以简化注册的过程。除了对需要使用的Resource和Provider组件进行register以外，还可以通过提供要注册组件所在的包，而自动将包内所有这两类组件注册。以下是示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">ResourceConfig</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyApplication</span><span class="params">()</span> </span>&#123;</div><div class="line">        packages(<span class="string">"org.foo.rest;org.bar.rest"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRESTExampleApplication</span> <span class="keyword">extends</span> <span class="title">ResourceConfig</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRESTExampleApplication</span><span class="params">()</span> </span>&#123;</div><div class="line">         packages(<span class="string">"com.carano.fleet4all.restExample"</span>);</div><div class="line">         register(JacksonFeature.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="ApplicationPath注解"><a href="#ApplicationPath注解" class="headerlink" title="ApplicationPath注解"></a>ApplicationPath注解</h5><p>　　可以为Application的实现类添加@javax.ws.rs.ApplicationPath注解，那么所有RESTful API的URI资源都将包含该注解提供的名字作为前缀。以下是示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@javax</span>.ws.rs.ApplicationPath(<span class="string">"api"</span>)</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfig</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getClasses() &#123;</div><div class="line">        Set&lt;Class&lt;?&gt;&gt; resources = <span class="keyword">new</span> java.util.HashSet&lt;&gt;();</div><div class="line">        addRestResourceClasses(resources); </div><div class="line">        resources.add(JacksonFeature.class);    </div><div class="line">        <span class="keyword">return</span> resources;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　在这里注册的所有资源，其URI定位都必然是/api/…</p>
<h3 id="Resource组件"><a href="#Resource组件" class="headerlink" title="Resource组件"></a>Resource组件</h3><p>　　搭建了基本的JAX-RS环境，便可以进行真正的业务逻辑的实现了。所谓的业务逻辑，无非对特定URI资源的增删改查操作。这些都是在Resource组件方法里通过特定的注解实现操作和资源的匹配的。所有在类名上面添加了@path注解的，都被认为是Resource组件。这些类方法上添加的@path注解，将与类的@path注解提供的名字以及ApplicationPath注解提供的名字组合在一起，作为其URI。</p>
<p>　　以下是Resource组件类示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Path</span>(<span class="string">"message"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageFacadeREST</span> <span class="keyword">extends</span> <span class="title">AbstractFacade</span>&lt;<span class="title">Message</span>&gt; </span>&#123;</div></pre></td></tr></table></figure></p>
<p>　　以下是某资源方法示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span></div><div class="line"><span class="meta">@Path</span>(<span class="string">"danger-unsolved"</span>)</div><div class="line"><span class="meta">@Consumes</span>(&#123;<span class="string">"application/json"</span>&#125;)</div><div class="line"><span class="meta">@Produces</span>(&#123;<span class="string">"application/json;charset=UTF-8"</span>&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">findUnSolved</span><span class="params">(@QueryParam(<span class="string">"page"</span>)</span> <span class="keyword">int</span> page,@<span class="title">QueryParam</span><span class="params">(<span class="string">"per-page"</span>)</span> <span class="keyword">int</span> perPage,@Context HttpServletResponse response) </span>&#123;</div></pre></td></tr></table></figure></p>
<p>　　先忽略掉无关的代码，只看@GET和@Path标注。@GET很容易猜到是用http的GET方法。@Path便是该资源的URI的一部分。如果findUnSolved方法是类MessageFacadeREST里的方法，且MessageFacadeREST在ApplicationConfig类里注册，那么findUnSolved方法便可以通过/api/message/danger-unsolved这个URI访问。如果加上@GET方法，那么就是对/api/message/danger-unsolved这个资源用http的GET方法访问，实际上便是调用对应的findUnSolved方法。</p>
<h3 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h3><p>　　RESTful API里涉及的HTTP方法一般是GET,POST,PUT,PATCH,DELETE。这些HTTP方法都是用注解形式添加在相应的Resource组件类的方法上。</p>
<ol>
<li>GET方法：用于对资源的读取，一般返回单个对象或者对象列表。</li>
<li>POST方法：用于创建新对象，需要在客户端传送一个完整对象给服务器，然后将整个对象写入数据库。一般需返回创建好的对象。</li>
<li>PUT方法：用于创建或替换已有对象，需要在客户端传送一个完整对象给服务器，如果数据库没有对应数据，则插入新数据；如果已有旧记录，则用新对象更新。一般需返回创建或更新的对象。</li>
<li>PATCH方法：用于修改某已有对象的部分属性。如果确保对象记录已经在服务器存在，且只需要修改很少的属性，那么推荐用PATCH方法去代替PUT方法。PATCH方法不需要传送整个对象，只需要传送对象id以及需要修改的属性即可。一般需返回更新的对象。</li>
<li>DELETE方法：删除相应对象记录。无返回。</li>
</ol>
<p>　　有一些HTTP proxy只支持GET和POST方法，而不支持其他方法。这种情况在规范里一般在http header里加入X-HTTP-Method-Override的key，里面保存真正的http方法，例如”PUT”或”PATCH”，而请求一律通过POST方法发送到服务器端。具体的代码实现将会在下一讲介绍。</p>
<h3 id="数据传输及序列化与反序列化"><a href="#数据传输及序列化与反序列化" class="headerlink" title="数据传输及序列化与反序列化"></a>数据传输及序列化与反序列化</h3><p>　　在RESTful API操作的是对象，传出与接收一般是实体的POJO对象。而对象如果传出，需要先进行序列化，以xml或json的形式传送。对象如果接收，则要进行反序列化，把json或xml的数据转换成实体的POJO对象。序列化或进行反序列化的数据类型一般用@Produces和@Consumes注解来实现。下面给出一个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PUT</span></div><div class="line"><span class="meta">@Path</span>(<span class="string">"&#123;id&#125;/block"</span>)</div><div class="line"><span class="meta">@Consumes</span>(&#123;<span class="string">"application/json"</span>&#125;)</div><div class="line"><span class="meta">@Produces</span>(&#123;<span class="string">"application/json"</span>&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> MessageDTO <span class="title">block</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span> Long id,@Context HttpServletRequest request,MessageDTO messageDTO) </span>&#123;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@XmlRootElement</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageDTO</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Long message1Id;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String message1Word;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> message1CommentCount;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> message1TransmissionCount;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String message1UserName;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Timestamp message1Date;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Long message1OwnerId;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> referenced;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Long message2Id;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String message2Word;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> message2CommentCount;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> message2TransmissionCount;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String message2UserName;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Timestamp message2Date;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Long message2OwnerId;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> blocked;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> deleted;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Timestamp managedDate;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String action;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String operator;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Timestamp <span class="title">getManagedDate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> managedDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setManagedDate</span><span class="params">(Timestamp managedDate)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.managedDate = managedDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAction</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> action;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAction</span><span class="params">(String action)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.action = action;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOperator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> operator;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOperator</span><span class="params">(String operator)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.operator = operator;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBlocked</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> blocked;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBlocked</span><span class="params">(<span class="keyword">boolean</span> blocked)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.blocked = blocked;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDeleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> deleted;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeleted</span><span class="params">(<span class="keyword">boolean</span> deleted)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.deleted = deleted;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageDTO</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getMessage1Id</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message1Id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage1Id</span><span class="params">(Long message1Id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message1Id = message1Id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage1Word</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message1Word;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage1Word</span><span class="params">(String message1Word)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message1Word = message1Word;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMessage1CommentCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message1CommentCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage1CommentCount</span><span class="params">(<span class="keyword">int</span> message1CommentCount)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message1CommentCount = message1CommentCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMessage1TransmissionCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message1TransmissionCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage1TransmissionCount</span><span class="params">(<span class="keyword">int</span> message1TransmissionCount)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message1TransmissionCount = message1TransmissionCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage1UserName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message1UserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage1UserName</span><span class="params">(String message1UserName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message1UserName = message1UserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Timestamp <span class="title">getMessage1Date</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message1Date;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage1Date</span><span class="params">(Timestamp message1Date)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message1Date = message1Date;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getMessage1OwnerId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message1OwnerId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage1OwnerId</span><span class="params">(Long message1OwnerId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message1OwnerId = message1OwnerId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReferenced</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> referenced;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReferenced</span><span class="params">(<span class="keyword">boolean</span> referenced)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.referenced = referenced;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getMessage2Id</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message2Id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage2Id</span><span class="params">(Long message2Id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message2Id = message2Id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage2Word</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message2Word;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage2Word</span><span class="params">(String message2Word)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message2Word = message2Word;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMessage2CommentCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message2CommentCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage2CommentCount</span><span class="params">(<span class="keyword">int</span> message2CommentCount)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message2CommentCount = message2CommentCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMessage2TransmissionCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message2TransmissionCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage2TransmissionCount</span><span class="params">(<span class="keyword">int</span> message2TransmissionCount)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message2TransmissionCount = message2TransmissionCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage2UserName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message2UserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage2UserName</span><span class="params">(String message2UserName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message2UserName = message2UserName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Timestamp <span class="title">getMessage2Date</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message2Date;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage2Date</span><span class="params">(Timestamp message2Date)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message2Date = message2Date;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getMessage2OwnerId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message2OwnerId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage2OwnerId</span><span class="params">(Long message2OwnerId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message2OwnerId = message2OwnerId;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　方法block是通过http的PUT方法访问的，需要传入一个MessageDTO对象，并返回一个MessageDTO对象。@Produces定义了返回对象将序列化成为json格式；@Cosumes定义了接收的对象是json格式的，将对其进行反序列化。JAX-RS里本身没有实现对特定对象自动进行序列化与反序列化。一般需实现MessageBodyWriter或MessageBodyReader这两个类，在这两个类里自行进行序列化与反序列化的处理。这两个类都属于Provider，将在下一讲介绍。但实际上，如果只是简单的进行json或xml的转换是非常简单的，并不需要另外实现Provider，只有对具体的格式有要求或者需要进行更多的配置才有必要实现。一般如果进行xml转换，只需要修改@Produces和@Consumes为对应格式，并且在需要进行序列化与反序列化的POJO类上加上@XmlRootElement注解，便可实现。这种做法实际上是JAX-RS后台调用JAXB实现，@XmlRootElement是JAXB注解，而JAXB是专门用于进行xml和JAVA对象转换的技术。如果需要用json格式，同样可以通过JAXB的@XmlRootElement注解实现，只需把@Provider或@Consumes修改为application/json即可。实际上如果你是用glassfish 4以上作为application server container的，如果以json格式进行传输不需要任何其他Provider或@XmlRootElement，只需要修改@Provider或@Consumes即可。因为glassfish 4已经配置了MOXy作为Default JSON-Binding Provider。MOXy是json的一个框架，它可以在Application里自动注册，不需要显示地手动注册资源。</p>
<p>　　目前，RESTful API规范建议一律采用json作为数据传输的格式，而不要使用xml。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　这篇教程主要针对JAX-RS的Resource组件的基础知识，介绍了RESTful API的概念，以及HTTP方法，URI资源定位和数据传输格式这三个最核心的内容，并涉及了一些RESTful API的设计规范。更多的设计规范以及关于Provider和http request和http response构建的知识，将再后面一一介绍。</p>
]]></content>
    </entry>
    
  
  
</search>
